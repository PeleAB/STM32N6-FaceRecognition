#!/bin/bash
# STM32N6 Face Recognition System - Pre-commit Hook
# Enforces coding standards before commits

set -e

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[CHECK]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get list of staged C/H files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(c|h)$' || true)

if [ -z "$STAGED_FILES" ]; then
    print_status "No C/H files staged for commit"
    exit 0
fi

print_status "Checking staged files: $(echo $STAGED_FILES | wc -w) files"

# Check for clang-format
if ! command -v clang-format >/dev/null 2>&1; then
    print_warning "clang-format not found. Install with: apt-get install clang-format"
    print_warning "Skipping format check"
else
    print_status "Checking code formatting..."
    
    # Check formatting for each staged file
    FORMAT_FAILED=false
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            if ! clang-format --dry-run --Werror "$file" >/dev/null 2>&1; then
                print_error "Format check failed for: $file"
                FORMAT_FAILED=true
            fi
        fi
    done
    
    if [ "$FORMAT_FAILED" = true ]; then
        print_error "Code formatting check failed!"
        echo "Fix formatting with: make format"
        echo "Or format specific files with: clang-format -i <file>"
        exit 1
    fi
    
    print_status "Code formatting check passed"
fi

# Check for clang-tidy
if ! command -v clang-tidy >/dev/null 2>&1; then
    print_warning "clang-tidy not found. Install with: apt-get install clang-tidy"
    print_warning "Skipping static analysis"
else
    print_status "Running static analysis..."
    
    # Run clang-tidy on staged C files only
    STAGED_C_FILES=$(echo "$STAGED_FILES" | grep '\.c$' || true)
    
    if [ -n "$STAGED_C_FILES" ]; then
        ANALYSIS_FAILED=false
        for file in $STAGED_C_FILES; do
            if [ -f "$file" ]; then
                # Run clang-tidy and capture output
                if ! clang-tidy "$file" -- -I Inc/ -I Middlewares/ -I STM32Cube_FW_N6/ >/dev/null 2>&1; then
                    print_warning "Static analysis warnings found in: $file"
                    # Note: We don't fail the commit for warnings, just report them
                fi
            fi
        done
        
        print_status "Static analysis completed"
    else
        print_status "No C files to analyze"
    fi
fi

# Check for common embedded C issues
print_status "Checking for common embedded C issues..."

ISSUES_FOUND=false

for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        # Check for printf in embedded code (should use debug prints)
        if grep -n "printf(" "$file" >/dev/null 2>&1; then
            print_warning "Found printf() in $file - consider using debug_printf() for embedded systems"
        fi
        
        # Check for malloc/free in embedded code
        if grep -n -E "(malloc|free|calloc|realloc)\(" "$file" >/dev/null 2>&1; then
            print_error "Found dynamic memory allocation in $file - not recommended for embedded systems"
            ISSUES_FOUND=true
        fi
        
        # Check for floating point divisions (expensive on some MCUs)
        if grep -n "/" "$file" | grep -E "[0-9.]+f?[[:space:]]*/" >/dev/null 2>&1; then
            print_warning "Found potential floating point division in $file - verify performance impact"
        fi
        
        # Check for proper volatile usage on global variables that might be accessed from ISRs
        if grep -n "^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]+[a-zA-Z_][a-zA-Z0-9_]*[[:space:]]*;" "$file" | grep -v volatile >/dev/null 2>&1; then
            print_warning "Check if global variables in $file need volatile qualifier"
        fi
    fi
done

if [ "$ISSUES_FOUND" = true ]; then
    print_error "Critical embedded C issues found!"
    echo "Please fix the issues above before committing"
    exit 1
fi

# Check for TODO/FIXME comments in committed code
print_status "Checking for TODO/FIXME comments..."
TODO_FOUND=false
for file in $STAGED_FILES; do
    if [ -f "$file" ]; then
        if grep -n -i -E "(TODO|FIXME|XXX|HACK)" "$file" >/dev/null 2>&1; then
            print_warning "Found TODO/FIXME comments in $file"
            grep -n -i -E "(TODO|FIXME|XXX|HACK)" "$file" | head -3
            TODO_FOUND=true
        fi
    fi
done

if [ "$TODO_FOUND" = true ]; then
    print_warning "Consider resolving TODO/FIXME comments before committing"
    echo "Continue anyway? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

print_status "All pre-commit checks passed!"
echo "Committing $(echo $STAGED_FILES | wc -w) files..."

exit 0